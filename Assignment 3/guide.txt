sudo apt install mpich
Steps:
1. Unzip opt
2. transfer .c file to opt->openmpi->bin
3. follow belore ALgorithm/Steps

Algorithm / Methods / Steps:

1. Download openmpi-4.1.4.tar.bz2 from http://www.open-mpi.org in a folder say LP5.
2. Goto the terminal (Command prompt)
3. Update using
    sudo apt-get update
    sudo apt install gcc {if not already installed}

4. Goto the directory which contains the downloaded file
5. Extract the files using
tar -jxf openmpi-4.1.4.tar.bz2

6. The directory openmpi-4.1.4 is created
7. Configure, compile and install by executing the following commands
    ./configure --prefix=$HOME/opt/openmpi
    make all
    make install

8. Now openmpi folder is created in ‘opt‘ folder of Home directory.
9. Now the folder LP5 can be deleted (optional)
10. Update the PATH and LD_LIBRARY_PATH environment variable using
echo "export PATH=\$PATH:\$HOME/opt/openmpi/bin" >> $HOME/.bashrc
echo "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$HOME/opt/openmpi/lib">>$HOME/.bashrc

11. Compile the program using
mpicc name of the program

12. Execute the program using
mpirun -np 4 ./a.out
or run below command
mpirun --oversubscribe -np 4 ./a.out


variations:
// 2_1_sum.c
#include <mpi.h>
#include <stdio.h>

int main() {
    int rank, size, num[100], local_num, local_sum, final_sum;

    MPI_Init(NULL, NULL);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if(rank == 0) {
        for(int i = 0; i < size; i++) {
            num[i] = i + 1;  // Fill array 1,2,3,...
        }
    }

    MPI_Scatter(num, 1, MPI_INT, &local_num, 1, MPI_INT, 0, MPI_COMM_WORLD);

    printf("local sum at rank %d is %d\n", rank, local_num);

    MPI_Reduce(&local_num, &final_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if(rank == 0) {
        printf("final sum = %d\n", final_sum);
    }

    MPI_Finalize();
    return 0;
}
// 2_2_multiplication.c
#include <mpi.h>
#include <stdio.h>

int main() {
    int rank, size, num[100], local_num, local_product, final_product;

    MPI_Init(NULL, NULL);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if(rank == 0) {
        for(int i = 0; i < size; i++) {
            num[i] = i + 1;  // Fill array 1,2,3,...
        }
    }

    MPI_Scatter(num, 1, MPI_INT, &local_num, 1, MPI_INT, 0, MPI_COMM_WORLD);

    printf("local multiplication at rank %d is %d\n", rank, local_num);

    MPI_Reduce(&local_num, &final_product, 1, MPI_INT, MPI_PROD, 0, MPI_COMM_WORLD);

    if(rank == 0) {
        printf("final product = %d\n", final_product);
    }

    MPI_Finalize();
    return 0;
}
// 2_3_average_random.c
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int rank, size, numbers[100], local_num, gathered[100];
    double local_avg, final_avg = 0.0;

    MPI_Init(NULL, NULL);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if(rank == 0) {
        srand(time(NULL));
        for(int i = 0; i < size; i++) {
            numbers[i] = rand() % 100;  // random 0–99
            printf("Random number[%d]: %d\n", i, numbers[i]);
        }
    }

    MPI_Scatter(numbers, 1, MPI_INT, &local_num, 1, MPI_INT, 0, MPI_COMM_WORLD);

    local_avg = (double)local_num; // single element, average is the number itself

    MPI_Gather(&local_avg, 1, MPI_DOUBLE, gathered, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    if(rank == 0) {
        for(int i = 0; i < size; i++) {
            final_avg += gathered[i];
        }
        final_avg = final_avg / size;
        printf("Final average = %f\n", final_avg);
    }

    MPI_Finalize();
    return 0;
}
// 2_4_reciprocal.c
#include <mpi.h>
#include <stdio.h>

int main() {
    int rank, size, num[100];
    int local_num;
    double local_reciprocal, gathered[100];

    MPI_Init(NULL, NULL);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if(rank == 0) {
        for(int i = 0; i < size; i++) {
            num[i] = i + 1;  // Fill array 1,2,3,...
        }
    }

    MPI_Scatter(num, 1, MPI_INT, &local_num, 1, MPI_INT, 0, MPI_COMM_WORLD);

    local_reciprocal = 1.0 / local_num;

    MPI_Gather(&local_reciprocal, 1, MPI_DOUBLE, gathered, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    if(rank == 0) {
        printf("Reciprocal array:\n");
        for(int i = 0; i < size; i++) {
            printf("1/%d = %f\n", i + 1, gathered[i]);
        }
    }

    MPI_Finalize();
    return 0;
}

